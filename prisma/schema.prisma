generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isTest        Boolean   @default(false)
  balance       Float     @default(1000000)
  portfolioId   String    @default(uuid())
  accounts      Account[]
  sessions      Session[]
  Holding       Holding[]
}

//If we know the current holdings and balance,
//do we really need a portfolio?
//Maybe we do, need more thinking.
//Got rid of oit

model Stock {
  id     String @id @default(uuid())
  symbol String @unique
  price  Float
}

model Holding {
  id           String    @id @default(cuid())
  quantity     Int
  buy_price    Float
  stock_symbol String
  portfolio_id String
  start_date   DateTime  @default(now())
  end_date     DateTime?
  uid          String
  user         User      @relation(fields: [uid], references: [id], onDelete: Cascade)
}

model Transaction {
  id           String   @id @default(uuid())
  timestamp    DateTime @default(now())
  stock_symbol String
  portfolio_id String
  unit_price   Float
  quantity     Float
  is_buy       Boolean  @default(true)
  free_balance Float
  uid          String
}

model StockTimeVal {
  id           String   @id @default(uuid())
  timestamp    DateTime @default(now())
  stock_symbol String
  price        Float
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
